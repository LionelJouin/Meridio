// Code generated by MockGen. DO NOT EDIT.
// Source: stream.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nordix/meridio/api/ambassador/v1"
	v10 "github.com/nordix/meridio/api/nsp/v1"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close), ctx)
}

// Equals mocks base method.
func (m *MockStream) Equals(arg0 *v1.Stream) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockStreamMockRecorder) Equals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockStream)(nil).Equals), arg0)
}

// GetStream mocks base method.
func (m *MockStream) GetStream() *v1.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream")
	ret0, _ := ret[0].(*v1.Stream)
	return ret0
}

// GetStream indicates an expected call of GetStream.
func (mr *MockStreamMockRecorder) GetStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockStream)(nil).GetStream))
}

// Open mocks base method.
func (m *MockStream) Open(ctx context.Context, nspStream *v10.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx, nspStream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockStreamMockRecorder) Open(ctx, nspStream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStream)(nil).Open), ctx, nspStream)
}
