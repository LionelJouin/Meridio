/*
Copyright (c) 2021 Nordix Foundation
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package ambassador.v1;
option go_package = "github.com/nordix/meridio/api/v1/ambassador";
import "google/protobuf/empty.proto";
import "api/nsp/v1/model.proto";

// Target Access Point Ambassador (TAPA) Service
service Tap {
    // Open a stream registers the target to the NSP,
    // If the trench or conduit is not connected to the target, then it will
    // be connected automatically before registering the target to the NSP.
    // If any property is not defined (empty name, nil trench/conduit...),
    // or, if another trench is already connected, an error will be returned.
    rpc Open(nsp.v1.Stream) returns (google.protobuf.Empty) {}
    // Close a stream unregisters the target from the NSP, disconnects
    // the target from the conduit if no more stream is connected to it,
    // and disconnects from the trench if no more conduit is connected to it.
    // If any property is not defined (empty name, nil trench/conduit...),
    // an error will be returned.
    rpc Close(nsp.v1.Stream) returns (google.protobuf.Empty) {}
    // WatchStream will return a list of stream status containing 
    // the same properties as the one in parameter (nil properties 
    // will be ignored). On any event (any stream created/deleted/updated)
    // the list will be sent again.
    rpc Watch(nsp.v1.Stream) returns (stream StreamResponse) {}
}

message StreamResponse {
    repeated StreamStatus streamStatus = 1;
}

message StreamStatus {
    enum Status {
        // ACTIVE = 0;
        // PENDING = 1;
        // Stream is open and ready to carry traffic
        OPEN = 0;
        // The stream is requested open, but a stable status is not known yet due to a lengthy transition
        PENDING = 1;
        // Stream is not reachable (NSP unreachable, under upgrade, failed etc.)
        UNAVAILABLE = 2;
        // The stream is requested open, but it is not defined on the Meridio side
        UNDEFINED = 3;
    }
    Status status = 1;
    nsp.v1.Stream stream = 2;
}